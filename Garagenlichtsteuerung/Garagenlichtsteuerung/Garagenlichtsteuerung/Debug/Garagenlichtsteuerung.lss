
Garagenlichtsteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061e  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c9  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000873  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00005e14  00000000  00000000  00001594  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c4  00000000  00000000  000073a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000766c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002012  00000000  00000000  000076bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	5f d0       	rcall	.+190    	; 0xf2 <main>
  34:	08 c1       	rjmp	.+528    	; 0x246 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <init_inputs>:
#include "pin_definition.h"


void init_inputs(void)
{
	NORMAL_INPUTS_DDR &= ~NORMAL_INPUT_MASK;
  38:	81 b3       	in	r24, 0x11	; 17
  3a:	8c 73       	andi	r24, 0x3C	; 60
  3c:	81 bb       	out	0x11, r24	; 17
	HVIN_DDR &= ~HVIN_MASK;
  3e:	a5 98       	cbi	0x14, 5	; 20
  40:	08 95       	ret

00000042 <get_input_val>:
}

unsigned char get_input_val(unsigned char input_num)
{
	unsigned char helper = 0;
	if(input_num == 0)
  42:	81 11       	cpse	r24, r1
  44:	04 c0       	rjmp	.+8      	; 0x4e <get_input_val+0xc>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT0_MASK))
  46:	80 b3       	in	r24, 0x10	; 16
  48:	80 95       	com	r24
  4a:	81 70       	andi	r24, 0x01	; 1
  4c:	08 95       	ret
			helper = 1;
	}
	else if(input_num == 1)
  4e:	81 30       	cpi	r24, 0x01	; 1
  50:	39 f4       	brne	.+14     	; 0x60 <get_input_val+0x1e>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT1_MASK))
  52:	80 b3       	in	r24, 0x10	; 16
  54:	81 fb       	bst	r24, 1
  56:	99 27       	eor	r25, r25
  58:	90 f9       	bld	r25, 0
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	89 27       	eor	r24, r25
  5e:	08 95       	ret
			helper = 1;
		
	}
	else if(input_num == 2)
  60:	82 30       	cpi	r24, 0x02	; 2
  62:	39 f4       	brne	.+14     	; 0x72 <get_input_val+0x30>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT2_MASK))
  64:	80 b3       	in	r24, 0x10	; 16
  66:	86 fb       	bst	r24, 6
  68:	99 27       	eor	r25, r25
  6a:	90 f9       	bld	r25, 0
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	89 27       	eor	r24, r25
  70:	08 95       	ret
			helper = 1;		
	}
	else if(input_num == 3)
  72:	83 30       	cpi	r24, 0x03	; 3
  74:	31 f4       	brne	.+12     	; 0x82 <get_input_val+0x40>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT3_MASK))
  76:	80 b3       	in	r24, 0x10	; 16
  78:	80 95       	com	r24
  7a:	88 1f       	adc	r24, r24
  7c:	88 27       	eor	r24, r24
  7e:	88 1f       	adc	r24, r24
  80:	08 95       	ret
	HVIN_DDR &= ~HVIN_MASK;
}

unsigned char get_input_val(unsigned char input_num)
{
	unsigned char helper = 0;
  82:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT3_MASK))
			helper = 1;		
	}
	return helper;	
}
  84:	08 95       	ret

00000086 <get_hvps_in_val>:

unsigned char get_hvps_in_val(void)
{
	unsigned char helper = 0;
	if(!(HVIN_PIN&HVIN_MASK))
  86:	83 b3       	in	r24, 0x13	; 19
  88:	85 fb       	bst	r24, 5
  8a:	88 27       	eor	r24, r24
  8c:	80 f9       	bld	r24, 0
		helper = 1;
	
	return helper;
  8e:	91 e0       	ldi	r25, 0x01	; 1
  90:	89 27       	eor	r24, r25
  92:	08 95       	ret

00000094 <init_leds>:
#include "pin_definition.h"
#include "led_handler.h"

void init_leds(void)
{
	LED_PORT &= ~LED_MASK;
  94:	85 b3       	in	r24, 0x15	; 21
  96:	81 7e       	andi	r24, 0xE1	; 225
  98:	85 bb       	out	0x15, r24	; 21
	LED_DDR |= LED_MASK;	
  9a:	84 b3       	in	r24, 0x14	; 20
  9c:	8e 61       	ori	r24, 0x1E	; 30
  9e:	84 bb       	out	0x14, r24	; 20
	
	OUT_ENABLE_PORT &= ~OUT_ENABLE_MASK;
  a0:	c0 98       	cbi	0x18, 0	; 24
	OUT_ENABLE_DDR |= OUT_ENABLE_MASK;
  a2:	b8 9a       	sbi	0x17, 0	; 23
  a4:	08 95       	ret

000000a6 <set_led>:
}

void set_led(unsigned char led_num, unsigned char val)
{
	if(led_num == 0)
  a6:	81 11       	cpse	r24, r1
  a8:	06 c0       	rjmp	.+12     	; 0xb6 <set_led+0x10>
	{
		if(val)
  aa:	66 23       	and	r22, r22
  ac:	11 f0       	breq	.+4      	; 0xb2 <set_led+0xc>
			LED_PORT |= LED0_MASK;
  ae:	a9 9a       	sbi	0x15, 1	; 21
  b0:	08 95       	ret
		else
			LED_PORT &= ~LED0_MASK;
  b2:	a9 98       	cbi	0x15, 1	; 21
  b4:	08 95       	ret
	}
	else if(led_num == 1)
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	31 f4       	brne	.+12     	; 0xc6 <set_led+0x20>
	{
		if(val)
  ba:	66 23       	and	r22, r22
  bc:	11 f0       	breq	.+4      	; 0xc2 <set_led+0x1c>
			LED_PORT |= LED1_MASK;
  be:	aa 9a       	sbi	0x15, 2	; 21
  c0:	08 95       	ret
		else
			LED_PORT &= ~LED1_MASK;		
  c2:	aa 98       	cbi	0x15, 2	; 21
  c4:	08 95       	ret
	}
	else if(led_num == 2)
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	31 f4       	brne	.+12     	; 0xd6 <set_led+0x30>
	{
		if(val)
  ca:	66 23       	and	r22, r22
  cc:	11 f0       	breq	.+4      	; 0xd2 <set_led+0x2c>
			LED_PORT |= LED2_MASK;
  ce:	ab 9a       	sbi	0x15, 3	; 21
  d0:	08 95       	ret
		else
			LED_PORT &= ~LED2_MASK;			
  d2:	ab 98       	cbi	0x15, 3	; 21
  d4:	08 95       	ret
	}
	else if(led_num == 3)
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	29 f4       	brne	.+10     	; 0xe4 <set_led+0x3e>
	{
		if(val)
  da:	66 23       	and	r22, r22
  dc:	11 f0       	breq	.+4      	; 0xe2 <set_led+0x3c>
			LED_PORT |= LED3_MASK;
  de:	ac 9a       	sbi	0x15, 4	; 21
  e0:	08 95       	ret
		else
			LED_PORT &= ~LED3_MASK;		
  e2:	ac 98       	cbi	0x15, 4	; 21
  e4:	08 95       	ret

000000e6 <enable_light>:
	}
}

void enable_light(unsigned char val)
{
	if(val)
  e6:	88 23       	and	r24, r24
  e8:	11 f0       	breq	.+4      	; 0xee <enable_light+0x8>
		OUT_ENABLE_PORT |= OUT_ENABLE_MASK;
  ea:	c0 9a       	sbi	0x18, 0	; 24
  ec:	08 95       	ret
	else
		OUT_ENABLE_PORT &= ~OUT_ENABLE_MASK;	
  ee:	c0 98       	cbi	0x18, 0	; 24
  f0:	08 95       	ret

000000f2 <main>:
	uint8_t light_on_delayed = 0;
	uint8_t light_on_direct = 0;
	uint16_t blink_led_ctr = 0;
	uint8_t blink_led_state = 0;
	
	init_leds();
  f2:	d0 df       	rcall	.-96     	; 0x94 <init_leds>
	init_inputs();
  f4:	a1 df       	rcall	.-190    	; 0x38 <init_inputs>
	
	//Bootup blink
	for(init_ctr=0;init_ctr<16;init_ctr++)
	{
		set_led(0,0);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	d5 df       	rcall	.-86     	; 0xa6 <set_led>
		set_led(1,0);
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	d2 df       	rcall	.-92     	; 0xa6 <set_led>
		set_led(2,0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	cf df       	rcall	.-98     	; 0xa6 <set_led>
		set_led(3,0);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	cc df       	rcall	.-104    	; 0xa6 <set_led>
	
	init_leds();
	init_inputs();
	
	//Bootup blink
	for(init_ctr=0;init_ctr<16;init_ctr++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	11 c0       	rjmp	.+34     	; 0x134 <main+0x42>
	{
		set_led(0,0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	c7 df       	rcall	.-114    	; 0xa6 <set_led>
		set_led(1,0);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	c4 df       	rcall	.-120    	; 0xa6 <set_led>
		set_led(2,0);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	c1 df       	rcall	.-126    	; 0xa6 <set_led>
		set_led(3,0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	be df       	rcall	.-132    	; 0xa6 <set_led>
		if(init_ctr&0x01)
 12a:	c0 ff       	sbrs	r28, 0
 12c:	03 c0       	rjmp	.+6      	; 0x134 <main+0x42>
			set_led(0,1);	
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	b9 df       	rcall	.-142    	; 0xa6 <set_led>
		if(init_ctr&0x02)
 134:	c1 ff       	sbrs	r28, 1
 136:	03 c0       	rjmp	.+6      	; 0x13e <main+0x4c>
			set_led(1,1);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	b4 df       	rcall	.-152    	; 0xa6 <set_led>
		if(init_ctr&0x04)
 13e:	c2 ff       	sbrs	r28, 2
 140:	03 c0       	rjmp	.+6      	; 0x148 <main+0x56>
			set_led(2,1);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	af df       	rcall	.-162    	; 0xa6 <set_led>
		if(init_ctr&0x08)
 148:	c3 ff       	sbrs	r28, 3
 14a:	03 c0       	rjmp	.+6      	; 0x152 <main+0x60>
			set_led(3,1);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	aa df       	rcall	.-172    	; 0xa6 <set_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	89 e6       	ldi	r24, 0x69	; 105
 156:	98 e1       	ldi	r25, 0x18	; 24
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x66>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x70>
 162:	00 00       	nop
	
	init_leds();
	init_inputs();
	
	//Bootup blink
	for(init_ctr=0;init_ctr<16;init_ctr++)
 164:	cf 5f       	subi	r28, 0xFF	; 255
 166:	c0 31       	cpi	r28, 0x10	; 16
 168:	a1 f6       	brne	.-88     	; 0x112 <main+0x20>
 16a:	10 e0       	ldi	r17, 0x00	; 0
 16c:	c1 2c       	mov	r12, r1
 16e:	d1 2c       	mov	r13, r1
 170:	76 01       	movw	r14, r12
	{
		_delay_ms(1);
		
		//handle light on static
		if(get_input_val(0)||get_input_val(1)||get_input_val(2)||get_input_val(3))
			light_on_direct = 0xFF;
 172:	cf ef       	ldi	r28, 0xFF	; 255
		set_led(3,light_on_delayed_evt);	
		
		//handle light on delayed
		if(light_on_delayed_evt)
		{
			light_on_delay_ctr = 1;
 174:	55 24       	eor	r5, r5
 176:	53 94       	inc	r5
 178:	61 2c       	mov	r6, r1
 17a:	71 2c       	mov	r7, r1
 17c:	81 2c       	mov	r8, r1
		{	enable_light(0xFF);
			set_led(0,0xFF);
		}
		else
		{	enable_light(0x00);
			set_led(0,0xFF);
 17e:	91 2c       	mov	r9, r1
 180:	a1 2c       	mov	r10, r1
 182:	b1 2c       	mov	r11, r1
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	8f e9       	ldi	r24, 0x9F	; 159
 188:	9f e0       	ldi	r25, 0x0F	; 15
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x98>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x9e>
 190:	00 00       	nop
	while(1)
	{
		_delay_ms(1);
		
		//handle light on static
		if(get_input_val(0)||get_input_val(1)||get_input_val(2)||get_input_val(3))
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	56 df       	rcall	.-340    	; 0x42 <get_input_val>
 196:	81 11       	cpse	r24, r1
 198:	10 c0       	rjmp	.+32     	; 0x1ba <main+0xc8>
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	52 df       	rcall	.-348    	; 0x42 <get_input_val>
 19e:	81 11       	cpse	r24, r1
 1a0:	0e c0       	rjmp	.+28     	; 0x1be <main+0xcc>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	4e df       	rcall	.-356    	; 0x42 <get_input_val>
 1a6:	81 11       	cpse	r24, r1
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <main+0xd0>
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	4a df       	rcall	.-364    	; 0x42 <get_input_val>
 1ae:	d1 e0       	ldi	r29, 0x01	; 1
 1b0:	81 11       	cpse	r24, r1
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <main+0xc4>
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	d1 95       	neg	r29
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <main+0xd2>
			light_on_direct = 0xFF;
 1ba:	dc 2f       	mov	r29, r28
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <main+0xd2>
 1be:	dc 2f       	mov	r29, r28
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <main+0xd2>
 1c2:	dc 2f       	mov	r29, r28
		else
			light_on_direct = 0x00;
		
		//read hvps in val	
		if(get_hvps_in_val())		
 1c4:	60 df       	rcall	.-320    	; 0x86 <get_hvps_in_val>
 1c6:	81 11       	cpse	r24, r1
 1c8:	2d c0       	rjmp	.+90     	; 0x224 <main+0x132>
 1ca:	34 c0       	rjmp	.+104    	; 0x234 <main+0x142>
			light_on_delay_ctr = 1;
			light_on_delayed = 1;
		}
		
		if(light_on_delay_ctr!=0)
		{	light_on_delay_ctr++;
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	c9 1a       	sub	r12, r25
 1d0:	d9 0a       	sbc	r13, r25
 1d2:	e9 0a       	sbc	r14, r25
 1d4:	f9 0a       	sbc	r15, r25
			light_on_delayed = 1;
		}
			
		if(light_on_delay_ctr>=LIGHT_ON_MS)
 1d6:	20 ee       	ldi	r18, 0xE0	; 224
 1d8:	c2 16       	cp	r12, r18
 1da:	23 e9       	ldi	r18, 0x93	; 147
 1dc:	d2 06       	cpc	r13, r18
 1de:	24 e0       	ldi	r18, 0x04	; 4
 1e0:	e2 06       	cpc	r14, r18
 1e2:	f1 04       	cpc	r15, r1
 1e4:	20 f4       	brcc	.+8      	; 0x1ee <main+0xfc>
			light_on_delayed = 1;
		}
		
		if(light_on_delay_ctr!=0)
		{	light_on_delay_ctr++;
			light_on_delayed = 1;
 1e6:	11 e0       	ldi	r17, 0x01	; 1
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <main+0x10a>
		{	light_on_delay_ctr = 0;
			light_on_delayed = 0;
		}
		
		//switch light on
		if(light_on_delayed || light_on_direct)
 1ea:	11 11       	cpse	r17, r1
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <main+0x10a>
 1ee:	dd 23       	and	r29, r29
 1f0:	59 f0       	breq	.+22     	; 0x208 <main+0x116>
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	c9 2c       	mov	r12, r9
 1f6:	da 2c       	mov	r13, r10
 1f8:	eb 2c       	mov	r14, r11
 1fa:	f0 2e       	mov	r15, r16
		{	enable_light(0xFF);
 1fc:	8c 2f       	mov	r24, r28
 1fe:	73 df       	rcall	.-282    	; 0xe6 <enable_light>
			set_led(0,0xFF);
 200:	6c 2f       	mov	r22, r28
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	50 df       	rcall	.-352    	; 0xa6 <set_led>
 206:	0a c0       	rjmp	.+20     	; 0x21c <main+0x12a>
		}
		else
		{	enable_light(0x00);
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	6d df       	rcall	.-294    	; 0xe6 <enable_light>
			set_led(0,0xFF);
 20c:	6c 2f       	mov	r22, r28
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	4a df       	rcall	.-364    	; 0xa6 <set_led>
 212:	10 e0       	ldi	r17, 0x00	; 0
 214:	c9 2c       	mov	r12, r9
 216:	da 2c       	mov	r13, r10
 218:	eb 2c       	mov	r14, r11
 21a:	f0 2e       	mov	r15, r16
		
		//blink test led
		blink_led_ctr++;
		if(blink_led_ctr==1000)
			blink_led_state = ~blink_led_state;
		set_led(4,0xFF);
 21c:	6c 2f       	mov	r22, r28
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	42 df       	rcall	.-380    	; 0xa6 <set_led>
		
	}
 222:	b1 cf       	rjmp	.-158    	; 0x186 <main+0x94>
		if(get_hvps_in_val())		
			light_on_delayed_evt = 0xFF;
		else
			light_on_delayed_evt = 0x00;
		
		set_led(3,light_on_delayed_evt);	
 224:	6c 2f       	mov	r22, r28
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	3e df       	rcall	.-388    	; 0xa6 <set_led>
		
		//handle light on delayed
		if(light_on_delayed_evt)
		{
			light_on_delay_ctr = 1;
 22a:	c5 2c       	mov	r12, r5
 22c:	d6 2c       	mov	r13, r6
 22e:	e7 2c       	mov	r14, r7
 230:	f8 2c       	mov	r15, r8
 232:	cc cf       	rjmp	.-104    	; 0x1cc <main+0xda>
		if(get_hvps_in_val())		
			light_on_delayed_evt = 0xFF;
		else
			light_on_delayed_evt = 0x00;
		
		set_led(3,light_on_delayed_evt);	
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	36 df       	rcall	.-404    	; 0xa6 <set_led>
		{
			light_on_delay_ctr = 1;
			light_on_delayed = 1;
		}
		
		if(light_on_delay_ctr!=0)
 23a:	c1 14       	cp	r12, r1
 23c:	d1 04       	cpc	r13, r1
 23e:	e1 04       	cpc	r14, r1
 240:	f1 04       	cpc	r15, r1
 242:	99 f2       	breq	.-90     	; 0x1ea <main+0xf8>
 244:	c3 cf       	rjmp	.-122    	; 0x1cc <main+0xda>

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
