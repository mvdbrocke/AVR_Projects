
Garagenlichtsteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ce  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027e  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d3f  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ed07  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b9  00000000  00000000  0001070f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000006f9  00000000  00000000  00010a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	5f d0       	rcall	.+190    	; 0x120 <main>
  62:	13 c1       	rjmp	.+550    	; 0x28a <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <init_inputs>:
#include "pin_definition.h"
#include <delay.h>

void init_inputs(void)
{
	NORMAL_INPUTS_DDR &= ~NORMAL_INPUT_MASK;
  66:	81 b3       	in	r24, 0x11	; 17
  68:	8c 73       	andi	r24, 0x3C	; 60
  6a:	81 bb       	out	0x11, r24	; 17
	HVIN_DDR &= ~HVIN_MASK;
  6c:	a5 98       	cbi	0x14, 5	; 20
  6e:	08 95       	ret

00000070 <get_input_val>:
}

unsigned char get_input_val(unsigned char input_num)
{
	unsigned char helper = 0;
	if(input_num == 0)
  70:	81 11       	cpse	r24, r1
  72:	04 c0       	rjmp	.+8      	; 0x7c <get_input_val+0xc>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT0_MASK))
  74:	80 b3       	in	r24, 0x10	; 16
  76:	80 95       	com	r24
  78:	81 70       	andi	r24, 0x01	; 1
  7a:	08 95       	ret
			helper = 1;
	}
	else if(input_num == 1)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	39 f4       	brne	.+14     	; 0x8e <get_input_val+0x1e>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT1_MASK))
  80:	80 b3       	in	r24, 0x10	; 16
  82:	81 fb       	bst	r24, 1
  84:	99 27       	eor	r25, r25
  86:	90 f9       	bld	r25, 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	89 27       	eor	r24, r25
  8c:	08 95       	ret
			helper = 1;
		
	}
	else if(input_num == 2)
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	39 f4       	brne	.+14     	; 0xa0 <get_input_val+0x30>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT2_MASK))
  92:	80 b3       	in	r24, 0x10	; 16
  94:	86 fb       	bst	r24, 6
  96:	99 27       	eor	r25, r25
  98:	90 f9       	bld	r25, 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 27       	eor	r24, r25
  9e:	08 95       	ret
			helper = 1;		
	}
	else if(input_num == 3)
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	31 f4       	brne	.+12     	; 0xb0 <get_input_val+0x40>
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT3_MASK))
  a4:	80 b3       	in	r24, 0x10	; 16
  a6:	80 95       	com	r24
  a8:	88 1f       	adc	r24, r24
  aa:	88 27       	eor	r24, r24
  ac:	88 1f       	adc	r24, r24
  ae:	08 95       	ret
	HVIN_DDR &= ~HVIN_MASK;
}

unsigned char get_input_val(unsigned char input_num)
{
	unsigned char helper = 0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(!(NORMAL_INPUTS_PIN&NORMAL_INPUT3_MASK))
			helper = 1;		
	}
	return helper;	
}
  b2:	08 95       	ret

000000b4 <get_hvps_in_val>:

unsigned char get_hvps_in_val(void)
{
	unsigned char helper = 0;
	if(!(HVIN_PIN&HVIN_MASK))
  b4:	83 b3       	in	r24, 0x13	; 19
  b6:	85 fb       	bst	r24, 5
  b8:	88 27       	eor	r24, r24
  ba:	80 f9       	bld	r24, 0
		helper = 1;
	
	return helper;
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	89 27       	eor	r24, r25
  c0:	08 95       	ret

000000c2 <init_leds>:
#include "pin_definition.h"
#include "led_handler.h"

void init_leds(void)
{
	LED_PORT &= ~LED_MASK;
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	81 7e       	andi	r24, 0xE1	; 225
  c6:	85 bb       	out	0x15, r24	; 21
	LED_DDR |= LED_MASK;	
  c8:	84 b3       	in	r24, 0x14	; 20
  ca:	8e 61       	ori	r24, 0x1E	; 30
  cc:	84 bb       	out	0x14, r24	; 20
	
	OUT_ENABLE_PORT &= ~OUT_ENABLE_MASK;
  ce:	c0 98       	cbi	0x18, 0	; 24
	OUT_ENABLE_DDR |= OUT_ENABLE_MASK;
  d0:	b8 9a       	sbi	0x17, 0	; 23
  d2:	08 95       	ret

000000d4 <set_led>:
}

void set_led(unsigned char led_num, unsigned char val)
{
	if(led_num == 0)
  d4:	81 11       	cpse	r24, r1
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <set_led+0x10>
	{
		if(val)
  d8:	66 23       	and	r22, r22
  da:	11 f0       	breq	.+4      	; 0xe0 <set_led+0xc>
			LED_PORT |= LED0_MASK;
  dc:	a9 9a       	sbi	0x15, 1	; 21
  de:	08 95       	ret
		else
			LED_PORT &= ~LED0_MASK;
  e0:	a9 98       	cbi	0x15, 1	; 21
  e2:	08 95       	ret
	}
	else if(led_num == 1)
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	31 f4       	brne	.+12     	; 0xf4 <set_led+0x20>
	{
		if(val)
  e8:	66 23       	and	r22, r22
  ea:	11 f0       	breq	.+4      	; 0xf0 <set_led+0x1c>
			LED_PORT |= LED1_MASK;
  ec:	aa 9a       	sbi	0x15, 2	; 21
  ee:	08 95       	ret
		else
			LED_PORT &= ~LED1_MASK;		
  f0:	aa 98       	cbi	0x15, 2	; 21
  f2:	08 95       	ret
	}
	else if(led_num == 2)
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	31 f4       	brne	.+12     	; 0x104 <set_led+0x30>
	{
		if(val)
  f8:	66 23       	and	r22, r22
  fa:	11 f0       	breq	.+4      	; 0x100 <set_led+0x2c>
			LED_PORT |= LED2_MASK;
  fc:	ab 9a       	sbi	0x15, 3	; 21
  fe:	08 95       	ret
		else
			LED_PORT &= ~LED2_MASK;			
 100:	ab 98       	cbi	0x15, 3	; 21
 102:	08 95       	ret
	}
	else if(led_num == 3)
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	29 f4       	brne	.+10     	; 0x112 <set_led+0x3e>
	{
		if(val)
 108:	66 23       	and	r22, r22
 10a:	11 f0       	breq	.+4      	; 0x110 <set_led+0x3c>
			LED_PORT |= LED3_MASK;
 10c:	ac 9a       	sbi	0x15, 4	; 21
 10e:	08 95       	ret
		else
			LED_PORT &= ~LED3_MASK;		
 110:	ac 98       	cbi	0x15, 4	; 21
 112:	08 95       	ret

00000114 <enable_light>:
	}
}

void enable_light(unsigned char val)
{
	if(val)
 114:	88 23       	and	r24, r24
 116:	11 f0       	breq	.+4      	; 0x11c <enable_light+0x8>
		OUT_ENABLE_PORT |= OUT_ENABLE_MASK;
 118:	c0 9a       	sbi	0x18, 0	; 24
 11a:	08 95       	ret
	else
		OUT_ENABLE_PORT &= ~OUT_ENABLE_MASK;	
 11c:	c0 98       	cbi	0x18, 0	; 24
 11e:	08 95       	ret

00000120 <main>:
	uint8_t light_on_delayed = 0;
	uint8_t light_on_direct = 0;
	uint16_t blink_led_ctr = 0;
	uint8_t blink_led_state = 0;
	
	init_leds();
 120:	d0 df       	rcall	.-96     	; 0xc2 <init_leds>
	init_inputs();
 122:	a1 df       	rcall	.-190    	; 0x66 <init_inputs>
	
	for(init_ctr=0;init_ctr<16;init_ctr++)
	{
		set_led(0,0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	d5 df       	rcall	.-86     	; 0xd4 <set_led>
		set_led(1,0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	d2 df       	rcall	.-92     	; 0xd4 <set_led>
		set_led(2,0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	cf df       	rcall	.-98     	; 0xd4 <set_led>
		set_led(3,0);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	cc df       	rcall	.-104    	; 0xd4 <set_led>
	uint8_t blink_led_state = 0;
	
	init_leds();
	init_inputs();
	
	for(init_ctr=0;init_ctr<16;init_ctr++)
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	0f 2e       	mov	r0, r31
 140:	f5 e5       	ldi	r31, 0x55	; 85
 142:	ff 2e       	mov	r15, r31
 144:	f0 2d       	mov	r31, r0
 146:	08 e5       	ldi	r16, 0x58	; 88
 148:	14 e1       	ldi	r17, 0x14	; 20
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	11 c0       	rjmp	.+34     	; 0x170 <main+0x50>
	{
		set_led(0,0);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	c0 df       	rcall	.-128    	; 0xd4 <set_led>
		set_led(1,0);
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	bd df       	rcall	.-134    	; 0xd4 <set_led>
		set_led(2,0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	ba df       	rcall	.-140    	; 0xd4 <set_led>
		set_led(3,0);
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	b7 df       	rcall	.-146    	; 0xd4 <set_led>
		if(init_ctr&0x01)
 166:	c0 ff       	sbrs	r28, 0
 168:	03 c0       	rjmp	.+6      	; 0x170 <main+0x50>
			set_led(0,1);	
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	b2 df       	rcall	.-156    	; 0xd4 <set_led>
		if(init_ctr&0x02)
 170:	c1 ff       	sbrs	r28, 1
 172:	03 c0       	rjmp	.+6      	; 0x17a <main+0x5a>
			set_led(1,1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	ad df       	rcall	.-166    	; 0xd4 <set_led>
		if(init_ctr&0x04)
 17a:	c2 ff       	sbrs	r28, 2
 17c:	03 c0       	rjmp	.+6      	; 0x184 <main+0x64>
			set_led(2,1);
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	a8 df       	rcall	.-176    	; 0xd4 <set_led>
		if(init_ctr&0x08)
 184:	c3 ff       	sbrs	r28, 3
 186:	03 c0       	rjmp	.+6      	; 0x18e <main+0x6e>
			set_led(3,1);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	a3 df       	rcall	.-186    	; 0xd4 <set_led>
	uint8_t blink_led_state = 0;
	
	init_leds();
	init_inputs();
	
	for(init_ctr=0;init_ctr<16;init_ctr++)
 18e:	8f 2d       	mov	r24, r15
 190:	90 2f       	mov	r25, r16
 192:	a1 2f       	mov	r26, r17
 194:	bd 2f       	mov	r27, r29
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	a1 09       	sbc	r26, r1
 19a:	b1 09       	sbc	r27, r1
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x76>
 19e:	cf 5f       	subi	r28, 0xFF	; 255
 1a0:	c0 31       	cpi	r28, 0x10	; 16
 1a2:	a9 f6       	brne	.-86     	; 0x14e <main+0x2e>
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	c1 2c       	mov	r12, r1
 1a8:	d1 2c       	mov	r13, r1
 1aa:	76 01       	movw	r14, r12
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
	{
		cpu_delay_ms(1,16E6);
		
		//handle light on static
		if(get_input_val(0)||get_input_val(1)||get_input_val(2)||get_input_val(3))
			light_on_direct = 0xFF;
 1b0:	cf ef       	ldi	r28, 0xFF	; 255
		set_led(3,light_on_delayed_evt);	
		
		//handle light on delayed
		if(light_on_delayed_evt)
		{
			light_on_delay_ctr = 1;
 1b2:	44 24       	eor	r4, r4
 1b4:	43 94       	inc	r4
 1b6:	51 2c       	mov	r5, r1
 1b8:	61 2c       	mov	r6, r1
 1ba:	71 2c       	mov	r7, r1
		{	enable_light(0xFF);
			set_led(0,0xFF);
		}
		else
		{	enable_light(0x00);
			set_led(0,0xFF);
 1bc:	81 2c       	mov	r8, r1
 1be:	91 2c       	mov	r9, r1
 1c0:	a1 2c       	mov	r10, r1
 1c2:	b1 2c       	mov	r11, r1
 1c4:	20 2f       	mov	r18, r16
 1c6:	31 2f       	mov	r19, r17
 1c8:	2f 5f       	subi	r18, 0xFF	; 255
 1ca:	3f 4f       	sbci	r19, 0xFF	; 255
 1cc:	2a 36       	cpi	r18, 0x6A	; 106
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	38 07       	cpc	r19, r24
 1d2:	d1 f7       	brne	.-12     	; 0x1c8 <main+0xa8>
	while(1)
	{
		cpu_delay_ms(1,16E6);
		
		//handle light on static
		if(get_input_val(0)||get_input_val(1)||get_input_val(2)||get_input_val(3))
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	4c df       	rcall	.-360    	; 0x70 <get_input_val>
 1d8:	81 11       	cpse	r24, r1
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <main+0xde>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	48 df       	rcall	.-368    	; 0x70 <get_input_val>
 1e0:	81 11       	cpse	r24, r1
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <main+0xe2>
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	44 df       	rcall	.-376    	; 0x70 <get_input_val>
 1e8:	81 11       	cpse	r24, r1
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <main+0xe6>
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	40 df       	rcall	.-384    	; 0x70 <get_input_val>
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	81 11       	cpse	r24, r1
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <main+0xd8>
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	39 2e       	mov	r3, r25
 1fa:	31 94       	neg	r3
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <main+0xe8>
			light_on_direct = 0xFF;
 1fe:	3c 2e       	mov	r3, r28
 200:	03 c0       	rjmp	.+6      	; 0x208 <main+0xe8>
 202:	3c 2e       	mov	r3, r28
 204:	01 c0       	rjmp	.+2      	; 0x208 <main+0xe8>
 206:	3c 2e       	mov	r3, r28
		else
			light_on_direct = 0x00;
		
		//read hvps in val	
		if(get_hvps_in_val())		
 208:	55 df       	rcall	.-342    	; 0xb4 <get_hvps_in_val>
 20a:	81 11       	cpse	r24, r1
 20c:	2d c0       	rjmp	.+90     	; 0x268 <main+0x148>
 20e:	34 c0       	rjmp	.+104    	; 0x278 <main+0x158>
			light_on_delay_ctr = 1;
			light_on_delayed = 1;
		}
		
		if(light_on_delay_ctr!=0)
		{	light_on_delay_ctr++;
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	c8 1a       	sub	r12, r24
 214:	d8 0a       	sbc	r13, r24
 216:	e8 0a       	sbc	r14, r24
 218:	f8 0a       	sbc	r15, r24
			light_on_delayed = 1;
		}
			
		if(light_on_delay_ctr>=LIGHT_ON_MS)
 21a:	80 ee       	ldi	r24, 0xE0	; 224
 21c:	c8 16       	cp	r12, r24
 21e:	83 e9       	ldi	r24, 0x93	; 147
 220:	d8 06       	cpc	r13, r24
 222:	84 e0       	ldi	r24, 0x04	; 4
 224:	e8 06       	cpc	r14, r24
 226:	f1 04       	cpc	r15, r1
 228:	20 f4       	brcc	.+8      	; 0x232 <main+0x112>
			light_on_delayed = 1;
		}
		
		if(light_on_delay_ctr!=0)
		{	light_on_delay_ctr++;
			light_on_delayed = 1;
 22a:	d1 e0       	ldi	r29, 0x01	; 1
 22c:	09 c0       	rjmp	.+18     	; 0x240 <main+0x120>
		{	light_on_delay_ctr = 0;
			light_on_delayed = 0;
		}
		
		//switch light on
		if(light_on_delayed || light_on_direct)
 22e:	d1 11       	cpse	r29, r1
 230:	07 c0       	rjmp	.+14     	; 0x240 <main+0x120>
 232:	33 20       	and	r3, r3
 234:	59 f0       	breq	.+22     	; 0x24c <main+0x12c>
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	c8 2c       	mov	r12, r8
 23a:	d9 2c       	mov	r13, r9
 23c:	ea 2c       	mov	r14, r10
 23e:	fb 2c       	mov	r15, r11
		{	enable_light(0xFF);
 240:	8c 2f       	mov	r24, r28
 242:	68 df       	rcall	.-304    	; 0x114 <enable_light>
			set_led(0,0xFF);
 244:	6c 2f       	mov	r22, r28
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	45 df       	rcall	.-374    	; 0xd4 <set_led>
 24a:	0a c0       	rjmp	.+20     	; 0x260 <main+0x140>
		}
		else
		{	enable_light(0x00);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	62 df       	rcall	.-316    	; 0x114 <enable_light>
			set_led(0,0xFF);
 250:	6c 2f       	mov	r22, r28
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	3f df       	rcall	.-386    	; 0xd4 <set_led>
 256:	d0 e0       	ldi	r29, 0x00	; 0
 258:	c8 2c       	mov	r12, r8
 25a:	d9 2c       	mov	r13, r9
 25c:	ea 2c       	mov	r14, r10
 25e:	fb 2c       	mov	r15, r11
		
		//blink test led
		blink_led_ctr++;
		if(blink_led_ctr==1000)
			blink_led_state = ~blink_led_state;
		set_led(4,0xFF);
 260:	6c 2f       	mov	r22, r28
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	37 df       	rcall	.-402    	; 0xd4 <set_led>
		
	}
 266:	ae cf       	rjmp	.-164    	; 0x1c4 <main+0xa4>
		if(get_hvps_in_val())		
			light_on_delayed_evt = 0xFF;
		else
			light_on_delayed_evt = 0x00;
		
		set_led(3,light_on_delayed_evt);	
 268:	6c 2f       	mov	r22, r28
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	33 df       	rcall	.-410    	; 0xd4 <set_led>
		
		//handle light on delayed
		if(light_on_delayed_evt)
		{
			light_on_delay_ctr = 1;
 26e:	c4 2c       	mov	r12, r4
 270:	d5 2c       	mov	r13, r5
 272:	e6 2c       	mov	r14, r6
 274:	f7 2c       	mov	r15, r7
 276:	cc cf       	rjmp	.-104    	; 0x210 <main+0xf0>
		if(get_hvps_in_val())		
			light_on_delayed_evt = 0xFF;
		else
			light_on_delayed_evt = 0x00;
		
		set_led(3,light_on_delayed_evt);	
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	2b df       	rcall	.-426    	; 0xd4 <set_led>
		{
			light_on_delay_ctr = 1;
			light_on_delayed = 1;
		}
		
		if(light_on_delay_ctr!=0)
 27e:	c1 14       	cp	r12, r1
 280:	d1 04       	cpc	r13, r1
 282:	e1 04       	cpc	r14, r1
 284:	f1 04       	cpc	r15, r1
 286:	99 f2       	breq	.-90     	; 0x22e <main+0x10e>
 288:	c3 cf       	rjmp	.-122    	; 0x210 <main+0xf0>

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
